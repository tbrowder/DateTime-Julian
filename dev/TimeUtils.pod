=begin pod

=head1 NAME

Astro::Montenbruck::Time - Time-related routines

=head1 VERSION

Version 0.01

=head1 SYNOPSIS

=begin code
use Astro::Montenbruck::Time qw/:all/;

# Convert Gregorian (new-style) date to old-style date
my $j = cal2jd(1799, 6, 6); # Standard Julian date of A.Pushkin's birthday
my $d = jd2cal($j, gregorian => 0) # (1799, 5, 25) = May 26, 1799.

# Julian date in centuries since epoch 2000.0
my $t = jd_cent($j); # -2.0056810403833
...
=end code

=head1 DESCRIPTION

Library of date/time manipulation routines for practical
astronomy. Most of them are based on so called I<Julian date (JD)>,
which is the number of days elapsed since mean UT noon of B<January
1st 4713 BC>. This system of time measurement is widely adopted by the
astronomers.

=head2 JD and MJD

Many routines use Modified Julian date, which starts at B<2000 January
0> (2000 January 1.0) as the starting point.

=head2 Civil year vs astronomical year

There is disagreement between astronomers and historians about how to
count the years preceding the year 1. Astronomers generally use
zero-based system. The year before the year +1, is the year zero, and
the year preceding the latter is the year -1. The year which the
historians call 585 B.C. is actually the year -584.

In this module all subroutines accepting year assume that B<there is
year zero>.  Thus, the sequence of years is: C<BC -3, -2, -1, 0, 1, 2,
3, AD>.

=head2 Date and Time

Time is represented by fractional part of a day. For example, 7h30m UT
is C<(7 + 30 / 60) / 24 = 0.3125>.

=head3 Gregorian calendar

I<Civil calendar> in most cases means I<proleptic Gregorian
calendar>. it is assumed that Gregorian calendar started at Oct. 4,
1582, when it was first adopted in several European countries. Many
other countries still used the older Julian calendar. In Soviet
Russia, for instance, Gregorian system was accepted on Jan 26,
1918. See:
L<https://en.wikipedia.org/wiki/Gregorian_calendar#Adoption_of_the_Gregorian_Calendar>

=head1 EXPORTED CONSTANTS

=item1 C<$SEC_PER_DAY> seconds per day (86400)

=item1 C<$SEC_PER_CEN> seconds per century (3155760000)

=item1 C<$J2000> Standard Julian date for start of epoch 2000,0 (2451545)

=item1 C<$J1900> Standard Julian date for start of epoch 1900,0 (2415020)

=item1 C<$GREGORIAN_START> Start of Gregorian calendar, YYYYMMDD (15821004)

=item1 C<$JD_UNIX_EPOCH> Standard Julian date for start of the Unix epoch


=head1 EXPORTED FUNCTIONS

=item1  L</jd_cent($jd)>

=item1  L</after_gregorian($year, $month, $date)>

=item1  L</cal2jd($year, $month, $date)>

=item1  L</jd2cal($jd)>

=item1  L</jd0($jd)>

=item1  L</unix2jd($seconds)>

=item1  L</jd2unix($jd)>

=item1  L</jdnow()>

=item1  L</jd2mjd($jd)>

=item1  L</mjd2jd($mjd)>

=item1  L</jd_cent($jd)>

=item1  L</t1900($jd)>

=item1  L</jd2dt($jd)>

=item1  L</jd2te($jd)>

=item1  L</jd2gst($jd)>

=item1  L</jd2lst($jd, $lng)>

=head1 FUNCTIONS

=head2 jd_cent($jd)

Convert Standard Julian Date to centuries passed since epoch 2000.0

=head2 after_gregorian($year, $month, $date, gregorian_start => $YYYYMMDD )

Does the given date fall to period after Gregorian calendar?

=head3 Positional Arguments


=item1 B<year> (astronomic, zero-based)

=item1 B<month> (1-12)

=item1 B<date> UTC date (1-31) with hours and minutes as decimal part


=head3 Optional Named Arguments


=item1 B<gregorian_start> — start of Gregorian calendar. Default value is
B<15821004> If the date is Julian ("old style"), use C<undef> value.
To provide non-standard start of Gregorian calendar, provide a number
in format YYYYMMDDD, e.g. C<19180126> for Jan 26, 1918.


=head3 Returns

I<true> or I<false>.

=head2 cal2jd($year, $month, $date)

Convert civil date/time to Standard Julian date.

If C<gregorian_start> argument is not provided, it is assumed that this is a date
of I<Proleptic Gregorian calendar>, which started at Oct. 4, 1582.

=head3 Positional Arguments:


=item1 B<year> (astronomic, zero-based)

=item1 B<month> (1-12)

=item1 B<date> UTC date (1-31) with hours and minutes as decimal part


=head3 Optional Named Arguments

=item1 gregorian_start — start of Gregorian calendar. Default value is
B<15821004> If the date is Julian ("old style"), use C<undef> value.
To provide non-standard start of Gregorian calendar, provide a number
in format YYYYMMDDD, e.g. C<19180126> for Jan 26, 1918.

=head3 Returns

Standard Julian date

=head2 jd2cal($jd)

Convert Standard Julian date to civil date/time

=head3 Positional Arguments

Standard Julian Date

=head3 Optional Named Arguments

=item1 gr1egorian — if i<true>, the result will be old-style (Julian) date

=head3 Returns

A list corresponding to the input values of L</cal2jd($year, $month, $date)> function.
The date is given in the proleptic Gregorian calendar system unless B<gregorian>
flag is set to I<true>.

=head2 jd0($jd)

Given Standard Julian Date, calculate Standard Julian date for midnight of the same date.

=head2 unix2jd($seconds)

Given Unix (POSIX) time, in seconds, convert it to Standard Julian date.

=head2 jd2unix($jd)

Given a Standard Julian Date, convert it to Unix time, in seconds since start of
Unix epoch.

If JD falls before start of the epoch, result will be negative and thus, unusable
for Unix-specific functions like B<localtime()>.

=head2 jdnow()

Standard Julian date for the current moment.

=head2 jd2mjd($jd)

Standard to Modified Julian date.

=head2 mjd2jd($mjd)

Modified to Standard Julian date.

=head2 jd_cent($jd)

Given aI<Standard Julian date>, calculate time in centuries since epoch 2000.0.

=head2 t1900($jd)

Given a I<Standard Julian date>, calculate time in centuries since epoch 1900.0.

=head2 jd2gst($jd)

Given I<Standard Julian date>, calculate I<True Greenwich Sidereal time>.

=head2 jd2lst($jd, $lng)

Given I<Standard Julian date>, calculate true I<Local Sidereal time>.

=head3 Arguments

=item1 $jd — Standard Julian date

=item1 $lng — Geographic longitude, negative for Eastern longitude, 0 by default

=head1 AUTHOR

Sergey Krushinsky, C<< <krushi at cpan.org> >>

=head1 LICENSE AND COPYRIGHT

E<0x00a9> 2010-2019 Sergey Krushinsky.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See L<http://dev.perl.org/licenses/> for more information.

=end pod
